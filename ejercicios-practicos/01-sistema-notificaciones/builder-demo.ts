/**
 * EJEMPLO DE USO DEL BUILDER PATTERN
 * 
 * Este archivo muestra c√≥mo usar el NotificationBuilder para crear
 * notificaciones de forma m√°s fluida y legible
 */

import { NotificationBuilder, NotificationBuilderExamples } from "./builder/notification-builder.ts";
import { ENotificationType } from "./models/enums/notification-types.ts";

//! Generado por Copilot

function demonstrateBuilder() {
  console.log("üèóÔ∏è DEMOSTRACI√ìN DEL BUILDER PATTERN");
  console.log("=====================================\n");

  // Ejemplo 1: Uso b√°sico del builder
  console.log("üìù 1. COMPARACI√ìN: Sin Builder vs Con Builder");
  
  // Sin Builder (c√≥digo anterior)
  console.log("\n‚ùå SIN BUILDER (m√°s verboso):");
  console.log(`
  let notification = NotificationManager.createNotification(type, data);
  NotificationProcessor.process(notification, type);
  notification = new VibrationDecorator(notification);
  notification = new SoundDecorator(notification);
  notification = new LoggingDecorator(notification);
  notification.send();
  `);

  // Con Builder (nuevo)
  console.log("\n‚úÖ CON BUILDER (m√°s limpio):");
  const builderNotification = NotificationBuilder
    .create(ENotificationType.PROMOTION, {
      id: 'builder-demo',
      title: 'Demo Builder',
      message: 'Ejemplo de uso del Builder',
      timestamp: Date.now(),
      priority: 'medium',
      data: { demo: true }
    })
    .withVibration()
    .withSound()
    .withLogging()
    .buildAndSend();

  console.log("‚úÖ Notificaci√≥n creada con Builder:", builderNotification.constructor.name);

  // Ejemplo 2: Configuraciones predefinidas
  console.log("\nüìã 2. CONFIGURACIONES PREDEFINIDAS");
  
  console.log("\nüî• Comportamientos Urgentes:");
  NotificationBuilder
    .create(ENotificationType.ORDER, {
      id: 'urgent-order',
      title: 'Pedido Urgente',
      message: 'Tu pedido necesita atenci√≥n',
      timestamp: Date.now(),
      priority: 'urgent',
      data: { orderId: 'ORD-001' }
    })
    .withUrgentBehaviors()  // vibration + sound + logging
    .buildAndSend();

  console.log("\nüîá Comportamientos Silenciosos:");
  NotificationBuilder
    .create(ENotificationType.SYSTEM, {
      id: 'silent-update',
      title: 'Actualizaci√≥n Silenciosa',
      message: 'Sistema actualizado en segundo plano',
      timestamp: Date.now(),
      priority: 'low',
      data: { version: '1.2.3' }
    })
    .withSilentBehaviors()  // cache + logging solamente
    .buildAndSend();

  // Ejemplo 3: Flexibilidad del builder
  console.log("\nüé® 3. FLEXIBILIDAD Y REUTILIZACI√ìN");
  
  const baseBuilder = NotificationBuilder
    .create(ENotificationType.CHAT, {
      id: 'chat-base',
      title: 'Chat Base',
      message: 'Mensaje base',
      timestamp: Date.now(),
      priority: 'medium',
      data: { chatRoom: 'general' }
    })
    .withLogging()
    .withCache();

  // Crear variaciones a partir de la base
  console.log("\nüí¨ Chat Normal:");
  const normalChat = baseBuilder
    .withSound()
    .buildAndSend();

  console.log("\nüö® Chat Urgente:");
  const urgentChat = NotificationBuilder
    .create(ENotificationType.CHAT, {
      id: 'urgent-chat',
      title: 'Chat Urgente',
      message: 'Mensaje urgente',
      timestamp: Date.now(),
      priority: 'urgent',
      data: { chatRoom: 'support' }
    })
    .withLogging()
    .withCache()
    .withVibration()
    .withSound()
    .buildAndSend();

  // Ejemplo 4: Configuraci√≥n avanzada
  console.log("\n‚öôÔ∏è 4. CONFIGURACI√ìN AVANZADA");
  
  const advancedBuilder = NotificationBuilder
    .create(ENotificationType.PROMOTION, {
      id: 'advanced-promo',
      title: 'Promoci√≥n Avanzada',
      message: 'Oferta con configuraci√≥n compleja',
      timestamp: Date.now(),
      priority: 'high',
      data: { 
        discount: 50, 
        category: 'electronics',
        validUntil: new Date(Date.now() + 86400000) // 24 horas
      }
    })
    .withDecorators(['vibration', 'sound', 'logging', 'cache'])
    .withAutoProcess(false);  // No procesar autom√°ticamente

  // Inspeccionar configuraci√≥n antes de construir
  console.log("\nüîç Configuraci√≥n del builder:", advancedBuilder.inspect());

  // Construir sin enviar
  const advancedNotification = advancedBuilder.build();
  console.log("üèóÔ∏è Notificaci√≥n construida (sin enviar):", advancedNotification.constructor.name);

  // Enviar manualmente
  advancedNotification.send?.();
}

function runExamples() {
  console.log("\nüéØ EJEMPLOS ESPEC√çFICOS POR TIPO");
  console.log("==================================");

  NotificationBuilderExamples.promotionExample();
  NotificationBuilderExamples.orderExample();
  NotificationBuilderExamples.chatExample();
  NotificationBuilderExamples.systemExample();
  NotificationBuilderExamples.customExample();
}

function showBuilderAdvantages() {
  console.log("\nüöÄ VENTAJAS DEL BUILDER PATTERN");
  console.log("===============================");
  
  console.log(`
  ‚úÖ LEGIBILIDAD: C√≥digo m√°s f√°cil de leer y entender
  ‚úÖ FLEXIBILIDAD: Configuraciones opcionales y modulares
  ‚úÖ REUTILIZACI√ìN: Configuraciones predefinidas reutilizables
  ‚úÖ VALIDACI√ìN: Validaci√≥n centralizada en el build()
  ‚úÖ INMUTABILIDAD: Configuraci√≥n step-by-step inmutable
  ‚úÖ EXTENSIBILIDAD: F√°cil a√±adir nuevos decoradores y opciones
  `);
}

// Ejecutar demostraci√≥n
function main() {
  demonstrateBuilder();
  runExamples();
  showBuilderAdvantages();
}

main();
